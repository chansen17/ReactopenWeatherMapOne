{"version":3,"sources":["api_key.js","components/Form/Form.jsx","components/Title/Title.jsx","components/Weather/Weather.jsx","App.jsx","serviceWorker.js","index.js"],"names":["API_KEY","Form","props","react_default","a","createElement","onSubmit","getWeather","className","type","name","placeholder","required","Title","Weather","city","country","loading","temperature","max_temp","min_temp","humidity","description","outlook","icon","src","alt","error","App","state","undefined","country_code","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","_this","setState","Math","floor","main","temp","temp_max","temp_min","sys","weather","console","log","stop","this","components_Title_Title","components_Form_Form","components_Weather_Weather","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mVAIeA,SAFC,oCCiBDC,SAhBF,SAACC,GAAD,OACTC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMC,SAAUJ,EAAMK,YAClBJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,cACXL,EAAAC,EAAAC,cAAA,SAAOI,KAAK,OAAOC,KAAK,OAAOC,YAAY,oBAAoBC,UAAQ,KAE3ET,EAAAC,EAAAC,cAAA,OAAKG,UAAU,cACXL,EAAAC,EAAAC,cAAA,SAAOI,KAAK,OAAOC,KAAK,UAAUC,YAAY,uBAAuBC,UAAQ,KAEjFT,EAAAC,EAAAC,cAAA,OAAKG,UAAU,cACXL,EAAAC,EAAAC,cAAA,kCCNDQ,SAJD,kBACVV,EAAAC,EAAAC,cAAA,4BCcWS,SAfC,SAACZ,GAAD,OACZC,EAAAC,EAAAC,cAAA,WAEMH,EAAMa,MAAQb,EAAMc,QAAUb,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,wBAAH,KAA2BH,EAAMa,KAAjC,IAAwCb,EAAMc,SAAed,EAAMe,QACjGf,EAAMgB,aAAef,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,2BAAH,KAA8BH,EAAMgB,aACzDhB,EAAMiB,UAAYhB,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,wBAAH,KAA2BH,EAAMiB,UACnDjB,EAAMkB,UAAYjB,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,mBAAH,KAAsBH,EAAMiB,UAC9CjB,EAAMmB,UAAYlB,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,wBAAH,KAA2BH,EAAMmB,UACnDnB,EAAMoB,aAAenB,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,2BAAH,KAA8BH,EAAMoB,aACzDpB,EAAMqB,SAAWpB,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,uBAAH,KAA0BH,EAAMqB,SACjDrB,EAAMsB,MAAQrB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,cAAciB,IAAKvB,EAAMsB,KAAME,IAAKxB,EAAMa,OACvEb,EAAMyB,OAASxB,EAAAC,EAAAC,cAAA,SAAIH,EAAMyB,UC4FpBC,6MA/FbC,MAAQ,CACNX,iBAAaY,EACbX,cAAUW,EACVV,cAAUU,EACVf,UAAMe,EACNd,aAASc,EACTC,kBAAcD,EACdT,cAAUS,EACVR,iBAAaQ,EACbP,aAASO,EACTN,UAAMM,EACNH,WAAOG,KAEPvB,iDAAa,SAAAyB,EAAOC,GAAP,IAAAlB,EAAAC,EAAAkB,EAAAC,EAAA,OAAAC,EAAAhC,EAAAiC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACXP,EAAEQ,iBACE1B,EAAOkB,EAAES,OAAOC,SAAS5B,KAAK6B,MAC9B5B,EAAUiB,EAAES,OAAOC,SAAS3B,QAAQ4B,MAH7BN,EAAAE,KAAA,EAKYK,MAAK,wFAAAC,OAAyF/B,EAAzF,KAAA+B,OAAiG9B,EAAjG,WAAA8B,OAAkH9C,IALnI,cAKLkC,EALKI,EAAAS,KAAAT,EAAAE,KAAA,EAMQN,EAASc,OANjB,OAMLb,EANKG,EAAAS,KAAA,mCAURhC,GAAQC,EACTiC,EAAKC,SAAS,CACZhC,YAAaiC,KAAKC,MAAMjB,EAAKkB,KAAKC,MAClCnC,SAAUgC,KAAKC,MAAMjB,EAAKkB,KAAKE,UAC/BnC,SAAU+B,KAAKC,MAAMjB,EAAKkB,KAAKG,UAC/BzC,KAAMoB,EAAKzB,KACXM,QAASmB,EAAKsB,IAAIzC,QAClBK,SAAUc,EAAKkB,KAAKhC,SACpBC,YAAaa,EAAKuB,QAAQ,GAAGpC,YAC7BC,QAASY,EAAKuB,QAAQ,GAAGL,KACzB7B,KApBO,mCAoBiBW,EAAKuB,QAAQ,GAAGlC,KAAO,OAC/CG,MAAO,KAGPsB,EAAKC,SAAS,CACZhC,iBAAaY,EACbX,cAAUW,EACVV,cAAUU,EACVf,UAAMe,EACNd,aAASc,EACTT,cAAUS,EACVR,iBAAaQ,EACbP,aAASO,EACTN,UAAMM,EACNH,MAAO,kCAIbgC,QAAQC,IAAIzB,GAtCD,yBAAAG,EAAAuB,SAAA7B,EAAA8B,uIAuDb,OACE3D,EAAAC,EAAAC,cAAA,OAAKG,UAAU,WACPL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,QACbL,EAAAC,EAAAC,cAAC0D,EAAD,OAEF5D,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACfL,EAAAC,EAAAC,cAAC2D,EAAD,CAAMzD,WAAYuD,KAAKvD,aACvBJ,EAAAC,EAAAC,cAAC4D,EAAD,CACE/C,YAAa4C,KAAKjC,MAAMyB,KACxBnC,SAAU2C,KAAKjC,MAAMV,SACrBC,SAAU0C,KAAKjC,MAAMT,SACrBL,KAAM+C,KAAKjC,MAAMd,KACjBC,QAAS8C,KAAKjC,MAAMb,QACpBe,aAAc+B,KAAKjC,MAAME,aACzBV,SAAUyC,KAAKjC,MAAMR,SACrBC,YAAawC,KAAKjC,MAAMP,YACxBC,QAASuC,KAAKjC,MAAMN,QACpBC,KAAMsC,KAAKjC,MAAML,KACjBG,MAAOmC,KAAKjC,MAAMF,MAClBV,QAAS6C,KAAKjC,MAAMZ,mBAzFlBiD,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtE,EAAAC,EAAAC,cAACqE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fcee2048.chunk.js","sourcesContent":["// openweathermap.org api key\n\nconst API_KEY = \"2703ca71e80bbc2dcf6542a0939a4522\";\n\nexport default API_KEY;","import React from 'react';\nimport './Form.css'\n\nconst Form = (props) => (\n    <div>\n        <form onSubmit={props.getWeather}>\n            <div className=\"form-input\">\n                <input type=\"text\" name=\"city\" placeholder=\"Please enter city\" required/>\n            </div>\n            <div className=\"form-input\">\n                <input type=\"text\" name=\"country\" placeholder=\"Please enter country\" required/>\n            </div>\n            <div className=\"form-input\">\n                <button>Get weather</button>\n            </div>\n        </form>\n    </div>\n);\n\nexport default Form;","import React from 'react';\nimport './Title.css';\n\nconst Title = () => (\n    <h1>ReactWeather</h1>\n);\n\nexport default Title;","import React from 'react';\nimport './Weather.css';\n\nconst Weather = (props) => (\n    <div>\n        {/* without ternary( ?, :) to render only true */}\n        { props.city && props.country ? <p><span>Location</span>: {props.city} {props.country}</p> : props.loading } \n        { props.temperature && <p><span>Temperature</span>: {props.temperature}</p>}\n        { props.max_temp && <p><span>Max_temp</span>: {props.max_temp}</p>}\n        { props.min_temp && <p><span>Min</span>: {props.max_temp}</p>}\n        { props.humidity && <p><span>Humidity</span>: {props.humidity}</p>}\n        { props.description && <p><span>Description</span>: {props.description}</p>}\n        { props.outlook && <p><span>Outlook</span>: {props.outlook}</p>}\n        { props.icon && <img className=\"weatherIcon\" src={props.icon} alt={props.city} />}\n        { props.error && <p>{props.error}</p> }\n    </div>  \n);\n\nexport default Weather;\n","import React, { Component } from 'react';\nimport './App.css';\n\n// components/views\nimport API_KEY from './api_key';\nimport Form from './components/Form/Form';\nimport Title from './components/Title/Title';\nimport Weather from './components/Weather/Weather';\n\nclass App extends Component {\n\n  state = {\n    temperature: undefined,\n    max_temp: undefined,\n    min_temp: undefined,\n    city: undefined,\n    country: undefined,\n    country_code: undefined,\n    humidity: undefined,\n    description: undefined,\n    outlook: undefined,\n    icon: undefined,\n    error: undefined,\n  }\n    getWeather = async (e) => {\n      e.preventDefault();\n      let city = e.target.elements.city.value;\n      let country = e.target.elements.country.value;\n\n      const api_call = await fetch(`https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`);\n      const data = await api_call.json();\n\n      let weatherIconPath = `http://openweathermap.org/img/w/`\n\n      if(city && country) {\n        this.setState({\n          temperature: Math.floor(data.main.temp),\n          max_temp: Math.floor(data.main.temp_max),\n          min_temp: Math.floor(data.main.temp_min),\n          city: data.name,\n          country: data.sys.country,\n          humidity: data.main.humidity,\n          description: data.weather[0].description,\n          outlook: data.weather[0].main,\n          icon: weatherIconPath + data.weather[0].icon + '.png',\n          error: '',\n        });\n      } else {\n          this.setState({\n            temperature: undefined,\n            max_temp: undefined,\n            min_temp: undefined,\n            city: undefined,\n            country: undefined,\n            humidity: undefined,\n            description: undefined,\n            outlook: undefined,\n            icon: undefined,\n            error: \"Please enter a city & country\",\n          });\n      }\n      \n      console.log(data);\n    }\n\n    // componentDidMount = () => {\n    //   const json = localStorage.getItem(\"weather\");\n    //   const weather = JSON.parse(json);\n    //   this.setState({\n    //     weather\n    //   })\n    // }\n    \n    // componentWillUpdate = () => {\n    //   localStorage.setItem(\"weather\", JSON.stringify(this.state));\n    // }\n\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n              <div className=\"left\">\n                <Title />\n              </div>\n              <div className=\"right\">\n              <Form getWeather={this.getWeather}/>\n              <Weather \n                temperature={this.state.temp}\n                max_temp={this.state.max_temp}\n                min_temp={this.state.min_temp}\n                city={this.state.city}\n                country={this.state.country}\n                country_code={this.state.country_code}\n                humidity={this.state.humidity}\n                description={this.state.description}\n                outlook={this.state.outlook}\n                icon={this.state.icon}\n                error={this.state.error}\n                loading={this.state.loading}\n              />\n            </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}